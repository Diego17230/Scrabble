from itertools import product as prod
letter_values = {'BLANK' : 0,'a':1 , 'b':3, 'c':3, 'd':2, 'e':1, 'f':4, 'g':2, 'h':4, 'i':1, 'j':8, 'k':5, 'l':1, 'm':3, 'n':1, 'o':1, 'p':3, 'q':10, 'r':1, 's':1, 't':1, 'u':1, 'v':8, 'w':4, 'x':8, 'y':4, 'z':10}


class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.multipliers = [1, 1]
        self.letter = ""

    def up(self):
        return board[self.x, self.y + 1]
    def down(self):
        return board[self.x, self.y - 1]
    def left(self):
        return board[self.x - 1, self.y]
    def right(self):
        return board[self.x + 1, self.y]
    
    def __repr__(self):
        return f"Coordinates: ({self.x}, {self.y}), Letter: {self.letter}"


class Board:
    def __init__(self):
        board = [Cell(x,y) for x, y in prod(range(1,16), range(1,16))]
        self.board = board
        for x,y in prod([1,8,15],[1,8,15]):
            if self[x,y] != self[8,8]:
                self[x,y].multipliers[1] = 3
        for n in range(2,6):
            self[n,n].multipliers[1] = self[n,16 - n].multipliers[1] = self[16 - n,n].multipliers[1] = self[16 - n, 16 - n].multipliers[1] = 2
        for x,y in prod([2,6,10,14],[2,6,10,14]):
            if self[x,y].multipliers[1] == 1:
                self[x,y].multipliers[0] = 3
            

    def __getitem__(self, coordinates):
        return [cell for cell in self.board if cell.x == coordinates[0] and cell.y == coordinates[1]][0]


class Word:
    def __init__(self, word, start_pos, direction):
        self.word = word
        self.all_points = []
        # Checks if the word is in words.txt
        with open("words.txt") as all_words:
            if word.upper() not in [word.strip() for word in all_words.readlines()]:
                print("Invalid word!")

        # Assigns all relevant cells a letter and adds them to a list
        for x, y, letter in zip(range(start_pos[0], len(word)+1), range(start_pos[1], len(word)+1), word):
            if direction == "y":
                # Coordinates is the coordinate of the cell the word covers
                coordinates = (start_pos[0], y)
            elif direction == "x":
                coordinates = (x, start_pos[1])
            else:
                raise ValueError(f"Direction: {direction} is not valid")
            self.all_points.append(board[coordinates])
            if board[coordinates].letter != letter and board[coordinates].letter != "":
                print("Invalid word!")
            board[coordinates].letter = letter

        self.value = 0
        final_multiplier = 1
        # Creates a value based on the letters and multipliers
        for index, cell in enumerate(self.all_points):
            self.value += cell.multipliers[0] * letter_values[word[index]]
            if cell.multipliers[1] > 1:
                # Makes sure there is only one multiplier
                final_multiplier = cell.multipliers[1]
        self.value *= final_multiplier


board = Board()
print(board[1, 1].up())
